@startuml





/' Objects '/

class Fluid {
	+Fluid(int container_size, float fluid_size, float diffusion, float viscosity, float dt)
	+~Fluid()
	-state : Field<CellType>
	-density : Field<float>
	-s : Field<float>
	-volume : Field<float>
	-vx : Field<float>
	-vx0 : Field<float>
	-vy : Field<float>
	-vy0 : Field<float>
	-vz : Field<float>
	-vz0 : Field<float>
	+should_voxelize : bool
	+diffusion : float
	-dt : float
	+get_density(v3 position) : float
	+get_volume(v3 position) : float
	+scaling : float
	-visc : float
	+container_size : int
	+get_state(v3 position) : int
	+obstacles : std::vector<std::unique_ptr<Obstacle>>
	-get_position(int i) : v3
	+get_velocity(v3 position) : v3
	+add_density(v3 position, float amount) : void
	+add_obstacle(std::unique_ptr<Obstacle> obstacle) : void
	+add_velocity(v3 position, v3 amount) : void
	-advect(FieldType b, Field<float>& d, Field<float>& d0, Field<float>& velocX, Field<float>& velocY, Field<float>& velocZ) : void
	-diffuse(FieldType b, Field<float>& x, Field<float>& x0, float diff) : void
	-lin_solve(FieldType b, Field<float>& x, Field<float>& x0, float a, float c) : void
	-project(Field<float>& velocX, Field<float>& velocY, Field<float>& velocZ, Field<float>& p, Field<float>& div) : void
	+reset() : void
	-set_boundaries(FieldType b, Field<float>& x) : void
	+step() : void
	+voxelize(Obstacle& obstacle) : void
	+voxelize_all() : void
}


enum CellType {
	CUT_CELL
	FLUID
	SOLID
	UNDEFINED
}


enum FieldType {
	DENSITY
	VX
	VY
	VZ
}





/' Inheritance relationships '/




/' Aggregation relationships '/

Fluid *-- CellType






/' Nested objects '/



@enduml
